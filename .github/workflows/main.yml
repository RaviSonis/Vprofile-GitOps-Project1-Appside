name: vprofile actions
on: workflow_dispatch

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: gitopsproject
  EKS_CLUSTER: vprofile-eks

jobs:
  Testing:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Set Java BEFORE Maven/Scanner
      - name: Set Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Maven test + reports
        run: |
          mvn -B clean test checkstyle:checkstyle
          # create Jacoco XML report expected by Sonar
          mvn -B jacoco:report

      - name: Install SonarScanner
        uses: warchant/setup-sonar-scanner@v7

      - name: SonarCloud scan
        env:
          SONAR_HOST_URL: https://sonarcloud.io
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_ORG: ${{ secrets.SONAR_ORGANIZATION }}   # ravisvprofile-actions22
          SONAR_PROJECT: ${{ secrets.SONAR_PROJECT_KEY }} # vprofile-action
        run: |
          set -euo pipefail
          # Trim any sneaky spaces/CRLF from secrets (common cause of 404s)
          HOST="$(printf '%s' "$SONAR_HOST_URL" | tr -d '\r' | xargs)"
          ORG="$(printf '%s' "$SONAR_ORG"        | tr -d '\r' | xargs)"
          PROJ="$(printf '%s' "$SONAR_PROJECT"   | tr -d '\r' | xargs)"

          # One-time debug (safe; no token). Remove later if you want.
          printf 'ORG=[%s]\nPROJ=[%s]\n' "$ORG" "$PROJ" | hexdump -C

          sonar-scanner \
            -Dsonar.host.url="$HOST" \
            -Dsonar.token="$SONAR_TOKEN" \
            -Dsonar.organization="$ORG" \
            -Dsonar.projectKey="$PROJ" \
            -Dsonar.projectName="vprofile-action" \
            -Dsonar.sources=src \
            -Dsonar.java.binaries="target/classes,target/test-classes" \
            -Dsonar.junit.reportPaths=target/surefire-reports \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
            -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
#
  BUILD_AND_PUBLISH:
    needs: Testing
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Build & Upload image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY }}
          repo: ${{ env.ECR_REPOSITORY }}
          region: ${{ env.AWS_REGION }}
          tags: latest,${{ github.run_number }}
          daemon_off: false
          dockerfile: ./Dockerfile
          context: ./
